# -*- coding: utf-8 -*-
"""image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_L8OKFQIiqG1u5uus_i0w8Sw5wFRF_2
"""

# image_processor.py

#  Step 1: Imports
import cv2
import numpy as np
import os
from google.colab import files
from matplotlib import pyplot as plt

#  Supported formats
SUPPORTED_FORMATS = ['.jpg', '.png', '.tif']

#  Step 2: Upload Image
def upload_image():
    uploaded = files.upload()
    if not uploaded:
        raise FileNotFoundError("‚ùå No image uploaded.")
    image_path = list(uploaded.keys())[0]
    ext = os.path.splitext(image_path)[-1].lower()
    if ext not in SUPPORTED_FORMATS:
        raise ValueError(f"‚ùå Unsupported file format: {ext}")
    return image_path

#  Step 3: Image Processing Functions

def adjust_brightness_contrast(image, brightness=30, contrast=40):
    """
    Adjust brightness and contrast of an image.
    :param image: Input image
    :param brightness: Integer value to adjust brightness
    :param contrast: Integer value to adjust contrast
    :return: Processed image
    """
    alpha = 1.0 + (contrast / 100.0)
    beta = brightness
    return cv2.convertScaleAbs(image, alpha=alpha, beta=beta)

def apply_gaussian_blur(image, kernel_size=(5, 5), sigma=0):
    """
    Apply Gaussian blur to the image.
    """
    return cv2.GaussianBlur(image, kernel_size, sigma)

def reduce_noise(image):
    """
    Reduce noise using Non-local Means Denoising.
    """
    return cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)

def detect_edges(image, low_threshold=50, high_threshold=150):
    """
    Detect edges using Canny algorithm.
    """
    return cv2.Canny(image, low_threshold, high_threshold)

def extract_histogram_features(image):
    """
    Extract histogram features for each channel.
    """
    chans = cv2.split(image)
    features = []
    for chan in chans:
        hist = cv2.calcHist([chan], [0], None, [256], [0, 256])
        hist = cv2.normalize(hist, hist).flatten()
        features.extend(hist)
    return np.array(features)

def display_images(images, titles, cmap_flags):
    """
    Display images using matplotlib.
    """
    plt.figure(figsize=(16, 5))
    for i in range(len(images)):
        plt.subplot(1, len(images), i+1)
        if cmap_flags[i]:
            plt.imshow(images[i], cmap='gray')
        else:
            plt.imshow(cv2.cvtColor(images[i], cv2.COLOR_BGR2RGB))
        plt.title(titles[i])
        plt.axis('off')
    plt.tight_layout()
    plt.show()

#  Step 4: Main Processing Pipeline
def process_image(image_path):
    # Read image
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError("‚ùå Image could not be loaded.")

    filename = os.path.splitext(os.path.basename(image_path))[0]
    os.makedirs("output", exist_ok=True)

    # 1. Brightness and Contrast
    img_bc = adjust_brightness_contrast(image)

    # 2. Gaussian Blur
    img_blur = apply_gaussian_blur(img_bc)

    # 3. Noise Reduction
    img_denoised = reduce_noise(img_blur)

    # 4. Convert to Grayscale
    img_gray = cv2.cvtColor(img_denoised, cv2.COLOR_BGR2GRAY)

    # 5. Edge Detection
    img_edges = detect_edges(img_gray)

    # 6. Feature Extraction
    features = extract_histogram_features(img_denoised)

    # Save outputs
    cv2.imwrite(f"output/{filename}_brightness_contrast.jpg", img_bc)
    cv2.imwrite(f"output/{filename}_blur.jpg", img_blur)
    cv2.imwrite(f"output/{filename}_denoised.jpg", img_denoised)
    cv2.imwrite(f"output/{filename}_edges.jpg", img_edges)
    np.save(f"output/{filename}_features.npy", features)

    # Display outputs
    display_images(
        [image, img_bc, img_blur, img_denoised, img_edges],
        ["Original", "Brightness/Contrast", "Gaussian Blur", "Denoised", "Canny Edges"],
        [False, False, False, False, True]
    )

    print("‚úÖ All steps completed. Feature vector saved as:")
    print(f"output/{filename}_features.npy")

#  Step 5: Main Entry Point
def main():
    try:
        image_path = upload_image()
        process_image(image_path)
    except Exception as e:
        print(f"‚ùå Error: {e}")

# Execute main
if __name__ == "__main__":
    main()

# image_processor.py

# üì¶ Step 1: Imports
import cv2
import numpy as np
import os
from google.colab import files
from matplotlib import pyplot as plt

# ‚úÖ Supported formats
SUPPORTED_FORMATS = ['.jpg', '.png', '.tif']

# üß† Step 2: Upload Image
def upload_image():
    uploaded = files.upload()
    if not uploaded:
        raise FileNotFoundError("‚ùå No image uploaded.")
    image_path = list(uploaded.keys())[0]
    ext = os.path.splitext(image_path)[-1].lower()
    if ext not in SUPPORTED_FORMATS:
        raise ValueError(f"‚ùå Unsupported file format: {ext}")
    return image_path

# ‚öôÔ∏è Step 3: Image Processing Functions

def adjust_brightness_contrast(image, brightness=30, contrast=40):
    """
    Adjust brightness and contrast of an image.
    :param image: Input image
    :param brightness: Integer value to adjust brightness
    :param contrast: Integer value to adjust contrast
    :return: Processed image
    """
    alpha = 1.0 + (contrast / 100.0)
    beta = brightness
    return cv2.convertScaleAbs(image, alpha=alpha, beta=beta)

def apply_gaussian_blur(image, kernel_size=(5, 5), sigma=0):
    """
    Apply Gaussian blur to the image.
    """
    return cv2.GaussianBlur(image, kernel_size, sigma)

def reduce_noise(image):
    """
    Reduce noise using Non-local Means Denoising.
    """
    return cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)

def detect_edges(image, low_threshold=50, high_threshold=150):
    """
    Detect edges using Canny algorithm.
    """
    return cv2.Canny(image, low_threshold, high_threshold)

def extract_histogram_features(image):
    """
    Extract histogram features for each channel.
    """
    chans = cv2.split(image)
    features = []
    for chan in chans:
        hist = cv2.calcHist([chan], [0], None, [256], [0, 256])
        hist = cv2.normalize(hist, hist).flatten()
        features.extend(hist)
    return np.array(features)

def display_images(images, titles, cmap_flags):
    """
    Display images using matplotlib.
    """
    plt.figure(figsize=(16, 5))
    for i in range(len(images)):
        plt.subplot(1, len(images), i+1)
        if cmap_flags[i]:
            plt.imshow(images[i], cmap='gray')
        else:
            plt.imshow(cv2.cvtColor(images[i], cv2.COLOR_BGR2RGB))
        plt.title(titles[i])
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# üîÅ Step 4: Main Processing Pipeline
def process_image(image_path):
    # Read image
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError("‚ùå Image could not be loaded.")

    filename = os.path.splitext(os.path.basename(image_path))[0]
    os.makedirs("output", exist_ok=True)

    # 1. Brightness and Contrast
    img_bc = adjust_brightness_contrast(image)

    # 2. Gaussian Blur
    img_blur = apply_gaussian_blur(img_bc)

    # 3. Noise Reduction
    img_denoised = reduce_noise(img_blur)

    # 4. Convert to Grayscale
    img_gray = cv2.cvtColor(img_denoised, cv2.COLOR_BGR2GRAY)

    # 5. Edge Detection
    img_edges = detect_edges(img_gray)

    # 6. Feature Extraction
    features = extract_histogram_features(img_denoised)

    # Save outputs
    cv2.imwrite(f"output/{filename}_brightness_contrast.jpg", img_bc)
    cv2.imwrite(f"output/{filename}_blur.jpg", img_blur)
    cv2.imwrite(f"output/{filename}_denoised.jpg", img_denoised)
    cv2.imwrite(f"output/{filename}_edges.jpg", img_edges)
    np.save(f"output/{filename}_features.npy", features)

    # Display outputs
    display_images(
        [image, img_bc, img_blur, img_denoised, img_edges],
        ["Original", "Brightness/Contrast", "Gaussian Blur", "Denoised", "Canny Edges"],
        [False, False, False, False, True]
    )

    print("‚úÖ All steps completed. Feature vector saved as:")
    print(f"output/{filename}_features.npy")

# üöÄ Step 5: Main Entry Point
def main():
    try:
        image_path = upload_image()
        process_image(image_path)
    except Exception as e:
        print(f"‚ùå Error: {e}")

# Execute main
if __name__ == "__main__":
    main()